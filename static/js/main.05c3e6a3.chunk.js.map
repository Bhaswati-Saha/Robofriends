{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card1","name","email","id","className","alt","src","CardList1","shopping1","cardArray","map","user","i","Card","key","search","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","res","json","users1","this","filteredShopping","filter","shopping","toLowerCase","includes","length","SearchBox","CardList","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCyBSC,EAZH,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GACxB,OACC,yBAAKC,UAAU,qDACZ,yBAAKC,IAAI,WAAWC,IAAG,+BAA0BH,EAA1B,cACjB,6BACI,4BAAKF,GACL,2BAAIC,MCuBJK,EAXC,SAAC,GAAe,IAAdC,EAAa,EAAbA,UACXC,EAAUD,EAAUE,KAAI,SAACC,EAAKC,GACnC,OAAO,kBAACC,EAAD,CAAMV,GAAIK,EAAUI,GAAGT,GAAIF,KAAMO,EAAUI,GAAGX,KAAMC,MAAOM,EAAUI,GAAGV,MAAOY,IAAKF,OAE5F,OACD,6BACKH,IC5CUM,EAVF,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC1B,OACC,yBAAKb,UAAU,OACf,2BAAOA,UAAU,kCACjBc,KAAK,SACLC,YAAY,eACZC,SAAUH,MCGGI,EARF,SAACC,GAEb,OACC,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC/DJ,EAAMK,SADP,MCiDaC,G,wDA/CR,aAAc,IAAD,8BACZ,gBAQDC,eAAe,SAACC,GAEf,EAAKC,SAAS,CAACf,YAAYc,EAAME,OAAOC,SATxC,EAAKC,MAAM,CACV1B,UAAW,GACXQ,YAAa,IAJF,E,gEAiBO,IAAD,OAElBmB,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GAAM,OAAE,EAAKR,SAAS,CAACvB,UAAU+B,S,+BAI9B,IAAD,EACmCC,KAAKN,MAA5BlB,EADZ,EACYA,YAAYR,EADxB,EACwBA,UACzBiC,EAAiBjC,EAAUkC,QAAO,SAAAC,GACxC,OAAOA,EAAS1C,KAAK2C,cAAcC,SAAS7B,EAAY4B,kBAIxD,OAASpC,EAAUsC,OAED,yBAAK1C,UAAU,MAC5B,wBAAIA,UAAU,MAAd,WACA,kBAAC2C,EAAD,CAAW9B,aAAcuB,KAAKX,iBAC9B,kBAAC,EAAD,KACA,kBAACmB,EAAD,CAAUxC,UAAWiC,MANC,2C,GAjClBQ,c,MCOlBC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SNsH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.05c3e6a3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from'react';\r\n\r\n\r\n/*const Card=(props)=>{\r\n\tconst {name,details,image}=props;//destructuring since props is an object\r\n\r\n\treturn(\r\n\t\t<div className=\"bg-light-green dib br3 bw2 shadow-5 pa3 ma5 grow \">\r\n\t\t   <img alt=\"apparels\" src={`${image}`} width=\"200\" height=\"200\"/>\r\n           <div>\r\n               <h2>{name}</h2>\r\n               <p>{details}</p>\r\n           </div>\r\n\r\n\t\t</div>\r\n\t\t);\r\n}*/\r\n//function name need not be same as file name so we can use Card as well as our own customized name like here I used Card1 but in index.js it must be the file name that is Card\r\n/*const Card1=({name,image,details})=>{\r\n\treturn(\r\n\t\t<div className=\"bg-light-green dib br3 bw2 shadow-5 pa3 ma5 grow \">\r\n\t\t   <img alt=\"apparels\" src={`${image}`} width=\"200\" height=\"200\"/>\r\n           <div>\r\n               <h2>{name}</h2>\r\n               <p>{details}</p>\r\n           </div>\r\n\r\n\t\t</div>\r\n\t\t);\r\n};*/\r\n\r\nconst Card1=({name,email,id})=>{\r\n\treturn(\r\n\t\t<div className=\"bg-light-green dib br3 bw2 shadow-5 pa3 ma5 grow \">\r\n\t\t   <img alt=\"apparels\" src={`https://robohash.org/${id}?200*200`} />\r\n           <div>\r\n               <h2>{name}</h2>\r\n               <p>{email}</p>\r\n           </div>\r\n\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default Card1;","import React from'react';\r\nimport Card from './Card';\r\n\r\n/*const CardList1=(props)=>{\r\nconst {shopping1}=props which means shopping1=props.shopping1\r\nreturn(\r\n<div>\r\n\t   <Card id={shopping1[0].id} name={shopping1[0].name} details={shopping1[0].details} image={shopping1[0].img}/>\r\n\t   <Card id={shopping1[1].id} name={shopping1[1].name} details={shopping1[1].details} image={shopping1[1].img}/>\r\n\t   <Card id={shopping1[2].id} name={shopping1[2].name} details={shopping1[2].details} image={shopping1[2].img}/>\r\n</div>);\r\n}\r\n*/\r\n/*\r\nconst CardList1=(props)=>{\r\n\r\nreturn(\r\n<div>\r\n\t   <Card id={props.shopping1[0].id} name={props.shopping1[0].name} details={props.shopping1[0].details} image={props.shopping1[0].img}/>\r\n\t   <Card id={props.shopping1[1].id} name={props.shopping1[1].name} details={props.shopping1[1].details} image={props.shopping1[1].img}/>\r\n\t   <Card id={props.shopping1[2].id} name={props.shopping1[2].name} details={props.shopping1[2].details} image={props.shopping1[2].img}/>\r\n</div>);\r\n}*/\r\n//shopping1 has shopping\r\n/*const CardList1=({shopping1})=>{\r\n\tconst cardArray=shopping1.map((user,i)=>{\r\n\t\treturn <Card id={shopping1[i].id} name={shopping1[i].name} details={shopping1[i].details} image={shopping1[i].img}/>\r\n\t});\r\n\treturn(\r\n<div>\r\n\t   <Card id={shopping1[0].id} name={shopping1[0].name} details={shopping1[0].details} image={shopping1[0].img}/>\r\n\t   <Card id={shopping1[1].id} name={shopping1[1].name} details={shopping1[1].details} image={shopping1[1].img}/>\r\n\t   <Card id={shopping1[2].id} name={shopping1[2].name} details={shopping1[2].details} image={shopping1[2].img}/>\r\n\t   \r\n</div>);\r\n}\r\n\r\n\r\nexport default CardList1;*/\r\n\r\n/*const CardList1=({shopping1})=>{\r\n\tconst cardArray=shopping1.map((user,i)=>{\r\n\t\treturn <Card id={shopping1[i].id} name={shopping1[i].name} details={shopping1[i].details} image={shopping1[i].img} key={i}/>\r\n\t});\r\n\treturn(\r\n<div>\r\n\t   {cardArray}\r\n</div>);\r\n}*/\r\nconst CardList1=({shopping1})=>{\r\n\tconst cardArray=shopping1.map((user,i)=>{\r\n\t\treturn <Card id={shopping1[i].id} name={shopping1[i].name} email={shopping1[i].email} key={i}/>\r\n\t});\r\n\treturn(\r\n<div>\r\n\t   {cardArray}\r\n</div>);\r\n}\r\n\r\n\r\nexport default CardList1;","import React from 'react';\r\nconst search=({searchfield,searchChange})=>{\r\n\treturn( \r\n\t\t<div className=\"pa2\">\r\n\t\t<input className=\"pa3 ba b--blue bg-lightest-blue\"\r\n\t\ttype=\"search\" \r\n\t\tplaceholder=\"Search Items\"\r\n\t\tonChange={searchChange} />\r\n\t\t</div>\r\n\t);\r\n};\r\nexport default search;","import React from 'react';\r\n//{{}} first bracket is for Javascript and inner one is creating a style object\r\nconst Scroll=(props)=>{\r\n\t//console.log(props);\r\n\treturn (\r\n\t\t<div style={{overflowY:'scroll',border:'5px solid black',height:'800px'}}>\r\n\t\t{props.children};\r\n\t\t</div>\r\n\t\t)\r\n}\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\n//import {shopping} from './shopping';\r\nimport Scroll from '../Components/Scroll';\r\nimport './App.css';\r\nclass App extends Component{\r\n       constructor(){\r\n       \tsuper()\r\n       \tthis.state={\r\n       \t\tshopping1: [],\r\n       \t\tsearchfield: ''\r\n       \t}\r\n       \t//console.log(\"1\");\r\n       }\r\n\r\n       onSearchChange=(event)=>\r\n       {//here this refers to App\r\n       \tthis.setState({searchfield:event.target.value});\r\n       \t\r\n       \t//console.log(filteredShopping);\r\n       \t//console.log(event.target.value);\r\n       \t//console.log(\"4\");\r\n       }\r\n       componentDidMount(){\r\n       \t//console.log(\"check\");\r\n       \tfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n       \t.then(res=>res.json())\r\n       \t.then(users1=>this.setState({shopping1:users1}));\r\n      \r\n       \t//console.log(\"3\");\r\n       }\r\n       \trender(){\r\n                     const {searchfield,shopping1}=this.state;\r\n       \t\tconst filteredShopping=shopping1.filter(shopping=>{\r\n       \t\treturn shopping.name.toLowerCase().includes(searchfield.toLowerCase());\r\n       \t})\r\n       \t\t\r\n       \t\t//console.log(\"2\");\r\n       \t\treturn (!shopping1.length)?<h1>Loading</h1>:\r\n       \t\t      (\r\n                           <div className=\"tc\">\r\n       \t\t\t    <h1 className=\"f1\">Femingo</h1>\r\n       \t\t\t    <SearchBox searchChange={this.onSearchChange} />\r\n       \t\t\t    <Scroll>\r\n       \t\t\t    <CardList shopping1={filteredShopping} />\r\n       \t\t\t    </Scroll>\r\n       \t\t\t</div>\r\n       \t\t\t);\r\n       \t\t\r\n       \t\t\t\r\n       \t}\r\n       \r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './Containers/App';\nimport 'tachyons';\n\n//ReactDOM.render(<Hello greeting={`Welcome React Ninja1`}/>,document.getElementById('root'));\n//ReactDOM.render(<Hello greeting={'Welcome ' +'React Ninja'}/>,document.getElementById('root'));\n// Here greeting is a property\n/*<Card id={shopping[0].id} name={shopping[0].name} details={shopping[0].details} image={shopping[0].img}/>\n<Card id={shopping[1].id} name={shopping[1].name} details={shopping[1].details} image={shopping[1].img}/>\n<Card id={shopping[2].id} name={shopping[2].name} details={shopping[2].details} image={shopping[2].img}/>*/\nReactDOM.render(<App />,document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}